%% -*- coding: utf-8 -*-
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.4.1
-module(concentrate_pb).

-export([encode_msg/1, encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/2, merge_msgs/3, merge_msgs/4]).
-export([verify_msg/1, verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export([enum_symbol_by_value_Radio/1, enum_value_by_symbol_Radio/1]).
-export([enum_symbol_by_value_Spreading/1, enum_value_by_symbol_Spreading/1]).
-export([enum_symbol_by_value_Bandwidth/1, enum_value_by_symbol_Bandwidth/1]).
-export([enum_symbol_by_value_Coderate/1, enum_value_by_symbol_Coderate/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([get_package_name/0]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).

-include("concentrate_pb.hrl").
-include("gpb.hrl").

%% enumerated types
-type 'Radio'() :: 'R0' | 'R1'.
-type 'Spreading'() :: 'UNDEFINED' | 'SF7' | 'SF8' | 'SF9' | 'SF10' | 'SF11' | 'SF12'.
-type 'Bandwidth'() :: 'UNDEFINED' | 'BW7_8kHz' | 'BW15_6kHz' | 'BW31_2kHz' | 'BW62_5kHz' | 'BW125kHz' | 'BW250kHz' | 'BW500kHz'.
-type 'Coderate'() :: 'UNDEFINED' | 'CR4_5' | 'CR4_6' | 'CR4_7' | 'CR4_8'.
-export_type(['Radio'/0, 'Spreading'/0, 'Bandwidth'/0, 'Coderate'/0]).

%% message types
-type miner_RxPacket_pb() :: #miner_RxPacket_pb{}.

-type miner_TxPacket_pb() :: #miner_TxPacket_pb{}.

-export_type(['miner_RxPacket_pb'/0, 'miner_TxPacket_pb'/0]).

-spec encode_msg(#miner_RxPacket_pb{} | #miner_TxPacket_pb{}) -> binary().
encode_msg(Msg) when tuple_size(Msg) >= 1 ->
    encode_msg(Msg, element(1, Msg), []).

-spec encode_msg(#miner_RxPacket_pb{} | #miner_TxPacket_pb{}, atom() | list()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []);
encode_msg(Msg, Opts)
    when tuple_size(Msg) >= 1, is_list(Opts) ->
    encode_msg(Msg, element(1, Msg), Opts).

-spec encode_msg(#miner_RxPacket_pb{} | #miner_TxPacket_pb{}, atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      miner_RxPacket_pb ->
	  encode_msg_miner_RxPacket_pb(id(Msg, TrUserData),
				       TrUserData);
      miner_TxPacket_pb ->
	  encode_msg_miner_TxPacket_pb(id(Msg, TrUserData),
				       TrUserData)
    end.


encode_msg_miner_RxPacket_pb(Msg, TrUserData) ->
    encode_msg_miner_RxPacket_pb(Msg, <<>>, TrUserData).


encode_msg_miner_RxPacket_pb(#miner_RxPacket_pb{freq =
						    F1,
						if_chain = F2, crc_check = F3,
						timestamp = F4, radio = F5,
						bandwidth = F6, spreading = F7,
						coderate = F8, rssi = F9,
						snr = F10, payload = F11},
			     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 0 -> B1;
		     true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= false -> B2;
		     true -> e_type_bool(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 0 -> B3;
		     true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 'R0'; TrF5 =:= 0 -> B4;
		     true ->
			 e_enum_Radio(TrF5, <<B4/binary, 40>>,
				      'MaybeTrUserData')
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 'UNDEFINED'; TrF6 =:= 0 -> B5;
		     true ->
			 e_enum_Bandwidth(TrF6, <<B5/binary, 48>>,
					  'MaybeTrUserData')
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= 'UNDEFINED'; TrF7 =:= 0 -> B6;
		     true ->
			 e_enum_Spreading(TrF7, <<B6/binary, 56>>,
					  'MaybeTrUserData')
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= 'UNDEFINED'; TrF8 =:= 0 -> B7;
		     true ->
			 e_enum_Coderate(TrF8, <<B7/binary, 64>>,
					 'MaybeTrUserData')
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= 0.0 -> B8;
		     true ->
			 e_type_float(TrF9, <<B8/binary, 77>>, TrUserData)
		  end
		end
	 end,
    B10 = if F10 == undefined -> B9;
	     true ->
		 begin
		   TrF10 = id(F10, TrUserData),
		   if TrF10 =:= 0.0 -> B9;
		      true ->
			  e_type_float(TrF10, <<B9/binary, 85>>, TrUserData)
		   end
		 end
	  end,
    if F11 == undefined -> B10;
       true ->
	   begin
	     TrF11 = id(F11, TrUserData),
	     case iolist_size(TrF11) of
	       0 -> B10;
	       _ -> e_type_bytes(TrF11, <<B10/binary, 90>>, TrUserData)
	     end
	   end
    end.

encode_msg_miner_TxPacket_pb(Msg, TrUserData) ->
    encode_msg_miner_TxPacket_pb(Msg, <<>>, TrUserData).


encode_msg_miner_TxPacket_pb(#miner_TxPacket_pb{freq =
						    F1,
						radio = F2, power = F3,
						bandwidth = F4, spreading = F5,
						coderate = F6,
						invert_polarity = F7,
						omit_crc = F8,
						implicit_header = F9,
						payload = F10},
			     Bin, TrUserData) ->
    B1 = if F1 == undefined -> Bin;
	    true ->
		begin
		  TrF1 = id(F1, TrUserData),
		  if TrF1 =:= 0 -> Bin;
		     true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
		  end
		end
	 end,
    B2 = if F2 == undefined -> B1;
	    true ->
		begin
		  TrF2 = id(F2, TrUserData),
		  if TrF2 =:= 'R0'; TrF2 =:= 0 -> B1;
		     true ->
			 e_enum_Radio(TrF2, <<B1/binary, 16>>,
				      'MaybeTrUserData')
		  end
		end
	 end,
    B3 = if F3 == undefined -> B2;
	    true ->
		begin
		  TrF3 = id(F3, TrUserData),
		  if TrF3 =:= 0 -> B2;
		     true ->
			 e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
		  end
		end
	 end,
    B4 = if F4 == undefined -> B3;
	    true ->
		begin
		  TrF4 = id(F4, TrUserData),
		  if TrF4 =:= 'UNDEFINED'; TrF4 =:= 0 -> B3;
		     true ->
			 e_enum_Bandwidth(TrF4, <<B3/binary, 32>>,
					  'MaybeTrUserData')
		  end
		end
	 end,
    B5 = if F5 == undefined -> B4;
	    true ->
		begin
		  TrF5 = id(F5, TrUserData),
		  if TrF5 =:= 'UNDEFINED'; TrF5 =:= 0 -> B4;
		     true ->
			 e_enum_Spreading(TrF5, <<B4/binary, 40>>,
					  'MaybeTrUserData')
		  end
		end
	 end,
    B6 = if F6 == undefined -> B5;
	    true ->
		begin
		  TrF6 = id(F6, TrUserData),
		  if TrF6 =:= 'UNDEFINED'; TrF6 =:= 0 -> B5;
		     true ->
			 e_enum_Coderate(TrF6, <<B5/binary, 48>>,
					 'MaybeTrUserData')
		  end
		end
	 end,
    B7 = if F7 == undefined -> B6;
	    true ->
		begin
		  TrF7 = id(F7, TrUserData),
		  if TrF7 =:= false -> B6;
		     true -> e_type_bool(TrF7, <<B6/binary, 56>>, TrUserData)
		  end
		end
	 end,
    B8 = if F8 == undefined -> B7;
	    true ->
		begin
		  TrF8 = id(F8, TrUserData),
		  if TrF8 =:= false -> B7;
		     true -> e_type_bool(TrF8, <<B7/binary, 64>>, TrUserData)
		  end
		end
	 end,
    B9 = if F9 == undefined -> B8;
	    true ->
		begin
		  TrF9 = id(F9, TrUserData),
		  if TrF9 =:= false -> B8;
		     true -> e_type_bool(TrF9, <<B8/binary, 72>>, TrUserData)
		  end
		end
	 end,
    if F10 == undefined -> B9;
       true ->
	   begin
	     TrF10 = id(F10, TrUserData),
	     case iolist_size(TrF10) of
	       0 -> B9;
	       _ -> e_type_bytes(TrF10, <<B9/binary, 82>>, TrUserData)
	     end
	   end
    end.

e_enum_Radio('R0', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_Radio('R1', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_Radio(V, Bin, _TrUserData) -> e_varint(V, Bin).

e_enum_Spreading('UNDEFINED', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_Spreading('SF7', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_Spreading('SF8', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_Spreading('SF9', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_Spreading('SF10', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
e_enum_Spreading('SF11', Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
e_enum_Spreading('SF12', Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
e_enum_Spreading(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

e_enum_Bandwidth('UNDEFINED', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_Bandwidth('BW7_8kHz', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_Bandwidth('BW15_6kHz', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_Bandwidth('BW31_2kHz', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_Bandwidth('BW62_5kHz', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
e_enum_Bandwidth('BW125kHz', Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
e_enum_Bandwidth('BW250kHz', Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
e_enum_Bandwidth('BW500kHz', Bin, _TrUserData) ->
    <<Bin/binary, 7>>;
e_enum_Bandwidth(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

e_enum_Coderate('UNDEFINED', Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_enum_Coderate('CR4_5', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_enum_Coderate('CR4_6', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
e_enum_Coderate('CR4_7', Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
e_enum_Coderate('CR4_8', Bin, _TrUserData) ->
    <<Bin/binary, 4>>;
e_enum_Coderate(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(miner_RxPacket_pb, Bin, TrUserData) ->
    id(decode_msg_miner_RxPacket_pb(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(miner_TxPacket_pb, Bin, TrUserData) ->
    id(decode_msg_miner_TxPacket_pb(Bin, TrUserData),
       TrUserData).



decode_msg_miner_RxPacket_pb(Bin, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Bin, 0, 0,
					 id(0, TrUserData), id(0, TrUserData),
					 id(false, TrUserData),
					 id(0, TrUserData),
					 id('R0', TrUserData),
					 id('UNDEFINED', TrUserData),
					 id('UNDEFINED', TrUserData),
					 id('UNDEFINED', TrUserData),
					 id(0.0, TrUserData),
					 id(0.0, TrUserData),
					 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_miner_RxPacket_pb(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_freq(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_if_chain(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<24,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_crc_check(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_timestamp(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<40,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_radio(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<48,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_bandwidth(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<56,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_spreading(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_coderate(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<77,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_rssi(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<85,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_snr(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<90,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, F@_11,
				     TrUserData) ->
    d_field_miner_RxPacket_pb_payload(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, F@_11, TrUserData);
dfp_read_field_def_miner_RxPacket_pb(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, F@_11, _) ->
    #miner_RxPacket_pb{freq = F@_1, if_chain = F@_2,
		       crc_check = F@_3, timestamp = F@_4, radio = F@_5,
		       bandwidth = F@_6, spreading = F@_7, coderate = F@_8,
		       rssi = F@_9, snr = F@_10, payload = F@_11};
dfp_read_field_def_miner_RxPacket_pb(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dg_read_field_def_miner_RxPacket_pb(Other, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, F@_11, TrUserData).

dg_read_field_def_miner_RxPacket_pb(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_miner_RxPacket_pb(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, TrUserData);
dg_read_field_def_miner_RxPacket_pb(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_miner_RxPacket_pb_freq(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, TrUserData);
      16 ->
	  d_field_miner_RxPacket_pb_if_chain(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11,
					     TrUserData);
      24 ->
	  d_field_miner_RxPacket_pb_crc_check(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
      32 ->
	  d_field_miner_RxPacket_pb_timestamp(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
      40 ->
	  d_field_miner_RxPacket_pb_radio(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, F@_11, TrUserData);
      48 ->
	  d_field_miner_RxPacket_pb_bandwidth(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
      56 ->
	  d_field_miner_RxPacket_pb_spreading(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
      64 ->
	  d_field_miner_RxPacket_pb_coderate(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11,
					     TrUserData);
      77 ->
	  d_field_miner_RxPacket_pb_rssi(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, F@_11, TrUserData);
      85 ->
	  d_field_miner_RxPacket_pb_snr(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, TrUserData);
      90 ->
	  d_field_miner_RxPacket_pb_payload(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, F@_10, F@_11,
					    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_miner_RxPacket_pb(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, F@_9, F@_10, F@_11,
					      TrUserData);
	    1 ->
		skip_64_miner_RxPacket_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					  F@_10, F@_11, TrUserData);
	    2 ->
		skip_length_delimited_miner_RxPacket_pb(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10, F@_11,
							TrUserData);
	    3 ->
		skip_group_miner_RxPacket_pb(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, F@_11,
					     TrUserData);
	    5 ->
		skip_32_miner_RxPacket_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					  F@_10, F@_11, TrUserData)
	  end
    end;
dg_read_field_def_miner_RxPacket_pb(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, F@_11, _) ->
    #miner_RxPacket_pb{freq = F@_1, if_chain = F@_2,
		       crc_check = F@_3, timestamp = F@_4, radio = F@_5,
		       bandwidth = F@_6, spreading = F@_7, coderate = F@_8,
		       rssi = F@_9, snr = F@_10, payload = F@_11}.

d_field_miner_RxPacket_pb_freq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_miner_RxPacket_pb_freq(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				   TrUserData);
d_field_miner_RxPacket_pb_freq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_miner_RxPacket_pb(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData).

d_field_miner_RxPacket_pb_if_chain(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_miner_RxPacket_pb_if_chain(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, TrUserData);
d_field_miner_RxPacket_pb_if_chain(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11,
				   TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_miner_RxPacket_pb(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData).

d_field_miner_RxPacket_pb_crc_check(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_miner_RxPacket_pb_crc_check(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, TrUserData);
d_field_miner_RxPacket_pb_crc_check(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_RxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData).

d_field_miner_RxPacket_pb_timestamp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_miner_RxPacket_pb_timestamp(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, TrUserData);
d_field_miner_RxPacket_pb_timestamp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_miner_RxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, NewFValue, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData).

d_field_miner_RxPacket_pb_radio(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_miner_RxPacket_pb_radio(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData);
d_field_miner_RxPacket_pb_radio(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Radio(begin
					    <<Res:32/signed-native>> = <<(X bsl
									    N
									    +
									    Acc):32/unsigned-native>>,
					    id(Res, TrUserData)
					  end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_RxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, NewFValue, F@_6,
					 F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData).

d_field_miner_RxPacket_pb_bandwidth(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_miner_RxPacket_pb_bandwidth(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, TrUserData);
d_field_miner_RxPacket_pb_bandwidth(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				    F@_7, F@_8, F@_9, F@_10, F@_11,
				    TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Bandwidth(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						id(Res, TrUserData)
					      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_RxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, NewFValue,
					 F@_7, F@_8, F@_9, F@_10, F@_11,
					 TrUserData).

d_field_miner_RxPacket_pb_spreading(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_miner_RxPacket_pb_spreading(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					F@_11, TrUserData);
d_field_miner_RxPacket_pb_spreading(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    _, F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Spreading(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						id(Res, TrUserData)
					      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_RxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6,
					 NewFValue, F@_8, F@_9, F@_10, F@_11,
					 TrUserData).

d_field_miner_RxPacket_pb_coderate(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_miner_RxPacket_pb_coderate(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       F@_11, TrUserData);
d_field_miner_RxPacket_pb_coderate(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, _, F@_9, F@_10, F@_11, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Coderate(begin
					       <<Res:32/signed-native>> = <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
					       id(Res, TrUserData)
					     end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_RxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 NewFValue, F@_9, F@_10, F@_11,
					 TrUserData).

d_field_miner_RxPacket_pb_rssi(<<0:16, 128, 127,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, _, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, id(infinity, TrUserData), F@_10,
					 F@_11, TrUserData);
d_field_miner_RxPacket_pb_rssi(<<0:16, 128, 255,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, _, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, id('-infinity', TrUserData),
					 F@_10, F@_11, TrUserData);
d_field_miner_RxPacket_pb_rssi(<<_:16, 1:1, _:7, _:1,
				 127:7, Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, _, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, id(nan, TrUserData), F@_10,
					 F@_11, TrUserData);
d_field_miner_RxPacket_pb_rssi(<<Value:32/little-float,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, _, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, id(Value, TrUserData), F@_10,
					 F@_11, TrUserData).

d_field_miner_RxPacket_pb_snr(<<0:16, 128, 127,
				Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, _, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, id(infinity, TrUserData),
					 F@_11, TrUserData);
d_field_miner_RxPacket_pb_snr(<<0:16, 128, 255,
				Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, _, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9,
					 id('-infinity', TrUserData), F@_11,
					 TrUserData);
d_field_miner_RxPacket_pb_snr(<<_:16, 1:1, _:7, _:1,
				127:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, _, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, id(nan, TrUserData), F@_11,
					 TrUserData);
d_field_miner_RxPacket_pb_snr(<<Value:32/little-float,
				Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, _, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, id(Value, TrUserData),
					 F@_11, TrUserData).

d_field_miner_RxPacket_pb_payload(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, F@_11, TrUserData)
    when N < 57 ->
    d_field_miner_RxPacket_pb_payload(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      F@_11, TrUserData);
d_field_miner_RxPacket_pb_payload(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_miner_RxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, NewFValue,
					 TrUserData).

skip_varint_miner_RxPacket_pb(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    skip_varint_miner_RxPacket_pb(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, TrUserData);
skip_varint_miner_RxPacket_pb(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_length_delimited_miner_RxPacket_pb(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					TrUserData)
    when N < 57 ->
    skip_length_delimited_miner_RxPacket_pb(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    F@_10, F@_11, TrUserData);
skip_length_delimited_miner_RxPacket_pb(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_miner_RxPacket_pb(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_group_miner_RxPacket_pb(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     F@_11, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_miner_RxPacket_pb(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_32_miner_RxPacket_pb(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, TrUserData).

skip_64_miner_RxPacket_pb(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, F@_11, TrUserData) ->
    dfp_read_field_def_miner_RxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, F@_11, TrUserData).

decode_msg_miner_TxPacket_pb(Bin, TrUserData) ->
    dfp_read_field_def_miner_TxPacket_pb(Bin, 0, 0,
					 id(0, TrUserData),
					 id('R0', TrUserData),
					 id(0, TrUserData),
					 id('UNDEFINED', TrUserData),
					 id('UNDEFINED', TrUserData),
					 id('UNDEFINED', TrUserData),
					 id(false, TrUserData),
					 id(false, TrUserData),
					 id(false, TrUserData),
					 id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_miner_TxPacket_pb(<<8, Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_miner_TxPacket_pb_freq(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				   F@_10, TrUserData);
dfp_read_field_def_miner_TxPacket_pb(<<16,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_miner_TxPacket_pb_radio(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, TrUserData);
dfp_read_field_def_miner_TxPacket_pb(<<24,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_miner_TxPacket_pb_power(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, TrUserData);
dfp_read_field_def_miner_TxPacket_pb(<<32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_miner_TxPacket_pb_bandwidth(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_miner_TxPacket_pb(<<40,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_miner_TxPacket_pb_spreading(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, TrUserData);
dfp_read_field_def_miner_TxPacket_pb(<<48,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_miner_TxPacket_pb_coderate(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, TrUserData);
dfp_read_field_def_miner_TxPacket_pb(<<56,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_miner_TxPacket_pb_invert_polarity(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      TrUserData);
dfp_read_field_def_miner_TxPacket_pb(<<64,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_miner_TxPacket_pb_omit_crc(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				       F@_9, F@_10, TrUserData);
dfp_read_field_def_miner_TxPacket_pb(<<72,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_miner_TxPacket_pb_implicit_header(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      F@_6, F@_7, F@_8, F@_9, F@_10,
					      TrUserData);
dfp_read_field_def_miner_TxPacket_pb(<<82,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				     F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    d_field_miner_TxPacket_pb_payload(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				      F@_9, F@_10, TrUserData);
dfp_read_field_def_miner_TxPacket_pb(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				     F@_9, F@_10, _) ->
    #miner_TxPacket_pb{freq = F@_1, radio = F@_2,
		       power = F@_3, bandwidth = F@_4, spreading = F@_5,
		       coderate = F@_6, invert_polarity = F@_7,
		       omit_crc = F@_8, implicit_header = F@_9,
		       payload = F@_10};
dfp_read_field_def_miner_TxPacket_pb(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				     F@_8, F@_9, F@_10, TrUserData) ->
    dg_read_field_def_miner_TxPacket_pb(Other, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					F@_8, F@_9, F@_10, TrUserData).

dg_read_field_def_miner_TxPacket_pb(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_miner_TxPacket_pb(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					TrUserData);
dg_read_field_def_miner_TxPacket_pb(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_miner_TxPacket_pb_freq(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					 F@_9, F@_10, TrUserData);
      16 ->
	  d_field_miner_TxPacket_pb_radio(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, TrUserData);
      24 ->
	  d_field_miner_TxPacket_pb_power(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					  F@_9, F@_10, TrUserData);
      32 ->
	  d_field_miner_TxPacket_pb_bandwidth(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10,
					      TrUserData);
      40 ->
	  d_field_miner_TxPacket_pb_spreading(Rest, 0, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5, F@_6,
					      F@_7, F@_8, F@_9, F@_10,
					      TrUserData);
      48 ->
	  d_field_miner_TxPacket_pb_coderate(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, TrUserData);
      56 ->
	  d_field_miner_TxPacket_pb_invert_polarity(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    F@_9, F@_10, TrUserData);
      64 ->
	  d_field_miner_TxPacket_pb_omit_crc(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, TrUserData);
      72 ->
	  d_field_miner_TxPacket_pb_implicit_header(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, F@_6, F@_7, F@_8,
						    F@_9, F@_10, TrUserData);
      82 ->
	  d_field_miner_TxPacket_pb_payload(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    F@_8, F@_9, F@_10, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_miner_TxPacket_pb(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, F@_6, F@_7,
					      F@_8, F@_9, F@_10, TrUserData);
	    1 ->
		skip_64_miner_TxPacket_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					  F@_10, TrUserData);
	    2 ->
		skip_length_delimited_miner_TxPacket_pb(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, F@_6, F@_7, F@_8,
							F@_9, F@_10,
							TrUserData);
	    3 ->
		skip_group_miner_TxPacket_pb(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     F@_8, F@_9, F@_10, TrUserData);
	    5 ->
		skip_32_miner_TxPacket_pb(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					  F@_10, TrUserData)
	  end
    end;
dg_read_field_def_miner_TxPacket_pb(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				    F@_9, F@_10, _) ->
    #miner_TxPacket_pb{freq = F@_1, radio = F@_2,
		       power = F@_3, bandwidth = F@_4, spreading = F@_5,
		       coderate = F@_6, invert_polarity = F@_7,
		       omit_crc = F@_8, implicit_header = F@_9,
		       payload = F@_10}.

d_field_miner_TxPacket_pb_freq(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_miner_TxPacket_pb_freq(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_miner_TxPacket_pb_freq(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_miner_TxPacket_pb(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10,
					 TrUserData).

d_field_miner_TxPacket_pb_radio(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_miner_TxPacket_pb_radio(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_miner_TxPacket_pb_radio(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Radio(begin
					    <<Res:32/signed-native>> = <<(X bsl
									    N
									    +
									    Acc):32/unsigned-native>>,
					    id(Res, TrUserData)
					  end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_TxPacket_pb(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_miner_TxPacket_pb_power(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_miner_TxPacket_pb_power(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, F@_8, F@_9, F@_10, TrUserData);
d_field_miner_TxPacket_pb_power(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, _, F@_4, F@_5, F@_6, F@_7,
				F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_miner_TxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, F@_4, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_miner_TxPacket_pb_bandwidth(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_miner_TxPacket_pb_bandwidth(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					TrUserData);
d_field_miner_TxPacket_pb_bandwidth(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Bandwidth(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						id(Res, TrUserData)
					      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_TxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, NewFValue, F@_5, F@_6,
					 F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_miner_TxPacket_pb_spreading(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				    F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_miner_TxPacket_pb_spreading(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
					TrUserData);
d_field_miner_TxPacket_pb_spreading(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6,
				    F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Spreading(begin
						<<Res:32/signed-native>> = <<(X
										bsl
										N
										+
										Acc):32/unsigned-native>>,
						id(Res, TrUserData)
					      end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_TxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, NewFValue, F@_6,
					 F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_miner_TxPacket_pb_coderate(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_miner_TxPacket_pb_coderate(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       TrUserData);
d_field_miner_TxPacket_pb_coderate(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, _,
				   F@_7, F@_8, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(d_enum_Coderate(begin
					       <<Res:32/signed-native>> = <<(X
									       bsl
									       N
									       +
									       Acc):32/unsigned-native>>,
					       id(Res, TrUserData)
					     end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_TxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, NewFValue,
					 F@_7, F@_8, F@_9, F@_10, TrUserData).

d_field_miner_TxPacket_pb_invert_polarity(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10,
					  TrUserData)
    when N < 57 ->
    d_field_miner_TxPacket_pb_invert_polarity(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, TrUserData);
d_field_miner_TxPacket_pb_invert_polarity(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, _, F@_8, F@_9, F@_10,
					  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_TxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6,
					 NewFValue, F@_8, F@_9, F@_10,
					 TrUserData).

d_field_miner_TxPacket_pb_omit_crc(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_miner_TxPacket_pb_omit_crc(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				       TrUserData);
d_field_miner_TxPacket_pb_omit_crc(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, _, F@_9, F@_10, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_TxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 NewFValue, F@_9, F@_10, TrUserData).

d_field_miner_TxPacket_pb_implicit_header(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, F@_9, F@_10,
					  TrUserData)
    when N < 57 ->
    d_field_miner_TxPacket_pb_implicit_header(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, F@_6, F@_7, F@_8,
					      F@_9, F@_10, TrUserData);
d_field_miner_TxPacket_pb_implicit_header(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  F@_6, F@_7, F@_8, _, F@_10,
					  TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_miner_TxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, NewFValue, F@_10, TrUserData).

d_field_miner_TxPacket_pb_payload(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, F@_10, TrUserData)
    when N < 57 ->
    d_field_miner_TxPacket_pb_payload(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				      TrUserData);
d_field_miner_TxPacket_pb_payload(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, F@_8, F@_9, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_miner_TxPacket_pb(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, NewFValue, TrUserData).

skip_varint_miner_TxPacket_pb(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, TrUserData) ->
    skip_varint_miner_TxPacket_pb(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, TrUserData);
skip_varint_miner_TxPacket_pb(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, TrUserData) ->
    dfp_read_field_def_miner_TxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, TrUserData).

skip_length_delimited_miner_TxPacket_pb(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10,
					TrUserData)
    when N < 57 ->
    skip_length_delimited_miner_TxPacket_pb(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					    F@_10, TrUserData);
skip_length_delimited_miner_TxPacket_pb(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					F@_6, F@_7, F@_8, F@_9, F@_10,
					TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_miner_TxPacket_pb(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, TrUserData).

skip_group_miner_TxPacket_pb(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_miner_TxPacket_pb(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, TrUserData).

skip_32_miner_TxPacket_pb(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    dfp_read_field_def_miner_TxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, TrUserData).

skip_64_miner_TxPacket_pb(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			  F@_10, TrUserData) ->
    dfp_read_field_def_miner_TxPacket_pb(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					 F@_8, F@_9, F@_10, TrUserData).

d_enum_Radio(0) -> 'R0';
d_enum_Radio(1) -> 'R1';
d_enum_Radio(V) -> V.

d_enum_Spreading(0) -> 'UNDEFINED';
d_enum_Spreading(1) -> 'SF7';
d_enum_Spreading(2) -> 'SF8';
d_enum_Spreading(3) -> 'SF9';
d_enum_Spreading(4) -> 'SF10';
d_enum_Spreading(5) -> 'SF11';
d_enum_Spreading(6) -> 'SF12';
d_enum_Spreading(V) -> V.

d_enum_Bandwidth(0) -> 'UNDEFINED';
d_enum_Bandwidth(1) -> 'BW7_8kHz';
d_enum_Bandwidth(2) -> 'BW15_6kHz';
d_enum_Bandwidth(3) -> 'BW31_2kHz';
d_enum_Bandwidth(4) -> 'BW62_5kHz';
d_enum_Bandwidth(5) -> 'BW125kHz';
d_enum_Bandwidth(6) -> 'BW250kHz';
d_enum_Bandwidth(7) -> 'BW500kHz';
d_enum_Bandwidth(V) -> V.

d_enum_Coderate(0) -> 'UNDEFINED';
d_enum_Coderate(1) -> 'CR4_5';
d_enum_Coderate(2) -> 'CR4_6';
d_enum_Coderate(3) -> 'CR4_7';
d_enum_Coderate(4) -> 'CR4_8';
d_enum_Coderate(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New)
    when element(1, Prev) =:= element(1, New) ->
    merge_msgs(Prev, New, element(1, Prev), []).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []);
merge_msgs(Prev, New, Opts)
    when element(1, Prev) =:= element(1, New),
	 is_list(Opts) ->
    merge_msgs(Prev, New, element(1, Prev), Opts).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      miner_RxPacket_pb ->
	  merge_msg_miner_RxPacket_pb(Prev, New, TrUserData);
      miner_TxPacket_pb ->
	  merge_msg_miner_TxPacket_pb(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_miner_RxPacket_pb/3}).
merge_msg_miner_RxPacket_pb(#miner_RxPacket_pb{freq =
						   PFfreq,
					       if_chain = PFif_chain,
					       crc_check = PFcrc_check,
					       timestamp = PFtimestamp,
					       radio = PFradio,
					       bandwidth = PFbandwidth,
					       spreading = PFspreading,
					       coderate = PFcoderate,
					       rssi = PFrssi, snr = PFsnr,
					       payload = PFpayload},
			    #miner_RxPacket_pb{freq = NFfreq,
					       if_chain = NFif_chain,
					       crc_check = NFcrc_check,
					       timestamp = NFtimestamp,
					       radio = NFradio,
					       bandwidth = NFbandwidth,
					       spreading = NFspreading,
					       coderate = NFcoderate,
					       rssi = NFrssi, snr = NFsnr,
					       payload = NFpayload},
			    _) ->
    #miner_RxPacket_pb{freq =
			   if NFfreq =:= undefined -> PFfreq;
			      true -> NFfreq
			   end,
		       if_chain =
			   if NFif_chain =:= undefined -> PFif_chain;
			      true -> NFif_chain
			   end,
		       crc_check =
			   if NFcrc_check =:= undefined -> PFcrc_check;
			      true -> NFcrc_check
			   end,
		       timestamp =
			   if NFtimestamp =:= undefined -> PFtimestamp;
			      true -> NFtimestamp
			   end,
		       radio =
			   if NFradio =:= undefined -> PFradio;
			      true -> NFradio
			   end,
		       bandwidth =
			   if NFbandwidth =:= undefined -> PFbandwidth;
			      true -> NFbandwidth
			   end,
		       spreading =
			   if NFspreading =:= undefined -> PFspreading;
			      true -> NFspreading
			   end,
		       coderate =
			   if NFcoderate =:= undefined -> PFcoderate;
			      true -> NFcoderate
			   end,
		       rssi =
			   if NFrssi =:= undefined -> PFrssi;
			      true -> NFrssi
			   end,
		       snr =
			   if NFsnr =:= undefined -> PFsnr;
			      true -> NFsnr
			   end,
		       payload =
			   if NFpayload =:= undefined -> PFpayload;
			      true -> NFpayload
			   end}.

-compile({nowarn_unused_function,merge_msg_miner_TxPacket_pb/3}).
merge_msg_miner_TxPacket_pb(#miner_TxPacket_pb{freq =
						   PFfreq,
					       radio = PFradio, power = PFpower,
					       bandwidth = PFbandwidth,
					       spreading = PFspreading,
					       coderate = PFcoderate,
					       invert_polarity =
						   PFinvert_polarity,
					       omit_crc = PFomit_crc,
					       implicit_header =
						   PFimplicit_header,
					       payload = PFpayload},
			    #miner_TxPacket_pb{freq = NFfreq, radio = NFradio,
					       power = NFpower,
					       bandwidth = NFbandwidth,
					       spreading = NFspreading,
					       coderate = NFcoderate,
					       invert_polarity =
						   NFinvert_polarity,
					       omit_crc = NFomit_crc,
					       implicit_header =
						   NFimplicit_header,
					       payload = NFpayload},
			    _) ->
    #miner_TxPacket_pb{freq =
			   if NFfreq =:= undefined -> PFfreq;
			      true -> NFfreq
			   end,
		       radio =
			   if NFradio =:= undefined -> PFradio;
			      true -> NFradio
			   end,
		       power =
			   if NFpower =:= undefined -> PFpower;
			      true -> NFpower
			   end,
		       bandwidth =
			   if NFbandwidth =:= undefined -> PFbandwidth;
			      true -> NFbandwidth
			   end,
		       spreading =
			   if NFspreading =:= undefined -> PFspreading;
			      true -> NFspreading
			   end,
		       coderate =
			   if NFcoderate =:= undefined -> PFcoderate;
			      true -> NFcoderate
			   end,
		       invert_polarity =
			   if NFinvert_polarity =:= undefined ->
				  PFinvert_polarity;
			      true -> NFinvert_polarity
			   end,
		       omit_crc =
			   if NFomit_crc =:= undefined -> PFomit_crc;
			      true -> NFomit_crc
			   end,
		       implicit_header =
			   if NFimplicit_header =:= undefined ->
				  PFimplicit_header;
			      true -> NFimplicit_header
			   end,
		       payload =
			   if NFpayload =:= undefined -> PFpayload;
			      true -> NFpayload
			   end}.


verify_msg(Msg) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), []);
verify_msg(X) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []);
verify_msg(Msg, Opts) when tuple_size(Msg) >= 1 ->
    verify_msg(Msg, element(1, Msg), Opts);
verify_msg(X, _Opts) ->
    mk_type_error(not_a_known_message, X, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      miner_RxPacket_pb ->
	  v_msg_miner_RxPacket_pb(Msg, [MsgName], TrUserData);
      miner_TxPacket_pb ->
	  v_msg_miner_TxPacket_pb(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_miner_RxPacket_pb/3}).
-dialyzer({nowarn_function,v_msg_miner_RxPacket_pb/3}).
v_msg_miner_RxPacket_pb(#miner_RxPacket_pb{freq = F1,
					   if_chain = F2, crc_check = F3,
					   timestamp = F4, radio = F5,
					   bandwidth = F6, spreading = F7,
					   coderate = F8, rssi = F9, snr = F10,
					   payload = F11},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [freq | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_type_uint32(F2, [if_chain | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_bool(F3, [crc_check | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_type_uint64(F4, [timestamp | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true -> v_enum_Radio(F5, [radio | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_enum_Bandwidth(F6, [bandwidth | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_enum_Spreading(F7, [spreading | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true ->
	   v_enum_Coderate(F8, [coderate | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true -> v_type_float(F9, [rssi | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_float(F10, [snr | Path], TrUserData)
    end,
    if F11 == undefined -> ok;
       true -> v_type_bytes(F11, [payload | Path], TrUserData)
    end,
    ok;
v_msg_miner_RxPacket_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, miner_RxPacket_pb}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_miner_TxPacket_pb/3}).
-dialyzer({nowarn_function,v_msg_miner_TxPacket_pb/3}).
v_msg_miner_TxPacket_pb(#miner_TxPacket_pb{freq = F1,
					   radio = F2, power = F3,
					   bandwidth = F4, spreading = F5,
					   coderate = F6, invert_polarity = F7,
					   omit_crc = F8, implicit_header = F9,
					   payload = F10},
			Path, TrUserData) ->
    if F1 == undefined -> ok;
       true -> v_type_uint32(F1, [freq | Path], TrUserData)
    end,
    if F2 == undefined -> ok;
       true -> v_enum_Radio(F2, [radio | Path], TrUserData)
    end,
    if F3 == undefined -> ok;
       true -> v_type_int32(F3, [power | Path], TrUserData)
    end,
    if F4 == undefined -> ok;
       true ->
	   v_enum_Bandwidth(F4, [bandwidth | Path], TrUserData)
    end,
    if F5 == undefined -> ok;
       true ->
	   v_enum_Spreading(F5, [spreading | Path], TrUserData)
    end,
    if F6 == undefined -> ok;
       true ->
	   v_enum_Coderate(F6, [coderate | Path], TrUserData)
    end,
    if F7 == undefined -> ok;
       true ->
	   v_type_bool(F7, [invert_polarity | Path], TrUserData)
    end,
    if F8 == undefined -> ok;
       true -> v_type_bool(F8, [omit_crc | Path], TrUserData)
    end,
    if F9 == undefined -> ok;
       true ->
	   v_type_bool(F9, [implicit_header | Path], TrUserData)
    end,
    if F10 == undefined -> ok;
       true -> v_type_bytes(F10, [payload | Path], TrUserData)
    end,
    ok;
v_msg_miner_TxPacket_pb(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, miner_TxPacket_pb}, X,
		  Path).

-compile({nowarn_unused_function,v_enum_Radio/3}).
-dialyzer({nowarn_function,v_enum_Radio/3}).
v_enum_Radio('R0', _Path, _TrUserData) -> ok;
v_enum_Radio('R1', _Path, _TrUserData) -> ok;
v_enum_Radio(V, Path, TrUserData) when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_Radio(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Radio'}, X, Path).

-compile({nowarn_unused_function,v_enum_Spreading/3}).
-dialyzer({nowarn_function,v_enum_Spreading/3}).
v_enum_Spreading('UNDEFINED', _Path, _TrUserData) -> ok;
v_enum_Spreading('SF7', _Path, _TrUserData) -> ok;
v_enum_Spreading('SF8', _Path, _TrUserData) -> ok;
v_enum_Spreading('SF9', _Path, _TrUserData) -> ok;
v_enum_Spreading('SF10', _Path, _TrUserData) -> ok;
v_enum_Spreading('SF11', _Path, _TrUserData) -> ok;
v_enum_Spreading('SF12', _Path, _TrUserData) -> ok;
v_enum_Spreading(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_Spreading(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Spreading'}, X, Path).

-compile({nowarn_unused_function,v_enum_Bandwidth/3}).
-dialyzer({nowarn_function,v_enum_Bandwidth/3}).
v_enum_Bandwidth('UNDEFINED', _Path, _TrUserData) -> ok;
v_enum_Bandwidth('BW7_8kHz', _Path, _TrUserData) -> ok;
v_enum_Bandwidth('BW15_6kHz', _Path, _TrUserData) -> ok;
v_enum_Bandwidth('BW31_2kHz', _Path, _TrUserData) -> ok;
v_enum_Bandwidth('BW62_5kHz', _Path, _TrUserData) -> ok;
v_enum_Bandwidth('BW125kHz', _Path, _TrUserData) -> ok;
v_enum_Bandwidth('BW250kHz', _Path, _TrUserData) -> ok;
v_enum_Bandwidth('BW500kHz', _Path, _TrUserData) -> ok;
v_enum_Bandwidth(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_Bandwidth(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Bandwidth'}, X, Path).

-compile({nowarn_unused_function,v_enum_Coderate/3}).
-dialyzer({nowarn_function,v_enum_Coderate/3}).
v_enum_Coderate('UNDEFINED', _Path, _TrUserData) -> ok;
v_enum_Coderate('CR4_5', _Path, _TrUserData) -> ok;
v_enum_Coderate('CR4_6', _Path, _TrUserData) -> ok;
v_enum_Coderate('CR4_7', _Path, _TrUserData) -> ok;
v_enum_Coderate('CR4_8', _Path, _TrUserData) -> ok;
v_enum_Coderate(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
v_enum_Coderate(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'Coderate'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.

get_msg_defs() ->
    [{{enum, 'Radio'}, [{'R0', 0}, {'R1', 1}]},
     {{enum, 'Spreading'},
      [{'UNDEFINED', 0}, {'SF7', 1}, {'SF8', 2}, {'SF9', 3},
       {'SF10', 4}, {'SF11', 5}, {'SF12', 6}]},
     {{enum, 'Bandwidth'},
      [{'UNDEFINED', 0}, {'BW7_8kHz', 1}, {'BW15_6kHz', 2},
       {'BW31_2kHz', 3}, {'BW62_5kHz', 4}, {'BW125kHz', 5},
       {'BW250kHz', 6}, {'BW500kHz', 7}]},
     {{enum, 'Coderate'},
      [{'UNDEFINED', 0}, {'CR4_5', 1}, {'CR4_6', 2},
       {'CR4_7', 3}, {'CR4_8', 4}]},
     {{msg, miner_RxPacket_pb},
      [#field{name = freq, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = if_chain, fnum = 2, rnum = 3,
	      type = uint32, occurrence = optional, opts = []},
       #field{name = crc_check, fnum = 3, rnum = 4,
	      type = bool, occurrence = optional, opts = []},
       #field{name = timestamp, fnum = 4, rnum = 5,
	      type = uint64, occurrence = optional, opts = []},
       #field{name = radio, fnum = 5, rnum = 6,
	      type = {enum, 'Radio'}, occurrence = optional,
	      opts = []},
       #field{name = bandwidth, fnum = 6, rnum = 7,
	      type = {enum, 'Bandwidth'}, occurrence = optional,
	      opts = []},
       #field{name = spreading, fnum = 7, rnum = 8,
	      type = {enum, 'Spreading'}, occurrence = optional,
	      opts = []},
       #field{name = coderate, fnum = 8, rnum = 9,
	      type = {enum, 'Coderate'}, occurrence = optional,
	      opts = []},
       #field{name = rssi, fnum = 9, rnum = 10, type = float,
	      occurrence = optional, opts = []},
       #field{name = snr, fnum = 10, rnum = 11, type = float,
	      occurrence = optional, opts = []},
       #field{name = payload, fnum = 11, rnum = 12,
	      type = bytes, occurrence = optional, opts = []}]},
     {{msg, miner_TxPacket_pb},
      [#field{name = freq, fnum = 1, rnum = 2, type = uint32,
	      occurrence = optional, opts = []},
       #field{name = radio, fnum = 2, rnum = 3,
	      type = {enum, 'Radio'}, occurrence = optional,
	      opts = []},
       #field{name = power, fnum = 3, rnum = 4, type = int32,
	      occurrence = optional, opts = []},
       #field{name = bandwidth, fnum = 4, rnum = 5,
	      type = {enum, 'Bandwidth'}, occurrence = optional,
	      opts = []},
       #field{name = spreading, fnum = 5, rnum = 6,
	      type = {enum, 'Spreading'}, occurrence = optional,
	      opts = []},
       #field{name = coderate, fnum = 6, rnum = 7,
	      type = {enum, 'Coderate'}, occurrence = optional,
	      opts = []},
       #field{name = invert_polarity, fnum = 7, rnum = 8,
	      type = bool, occurrence = optional, opts = []},
       #field{name = omit_crc, fnum = 8, rnum = 9, type = bool,
	      occurrence = optional, opts = []},
       #field{name = implicit_header, fnum = 9, rnum = 10,
	      type = bool, occurrence = optional, opts = []},
       #field{name = payload, fnum = 10, rnum = 11,
	      type = bytes, occurrence = optional, opts = []}]}].


get_msg_names() ->
    [miner_RxPacket_pb, miner_TxPacket_pb].


get_group_names() -> [].


get_msg_or_group_names() ->
    [miner_RxPacket_pb, miner_TxPacket_pb].


get_enum_names() ->
    ['Radio', 'Spreading', 'Bandwidth', 'Coderate'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(miner_RxPacket_pb) ->
    [#field{name = freq, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = if_chain, fnum = 2, rnum = 3,
	    type = uint32, occurrence = optional, opts = []},
     #field{name = crc_check, fnum = 3, rnum = 4,
	    type = bool, occurrence = optional, opts = []},
     #field{name = timestamp, fnum = 4, rnum = 5,
	    type = uint64, occurrence = optional, opts = []},
     #field{name = radio, fnum = 5, rnum = 6,
	    type = {enum, 'Radio'}, occurrence = optional,
	    opts = []},
     #field{name = bandwidth, fnum = 6, rnum = 7,
	    type = {enum, 'Bandwidth'}, occurrence = optional,
	    opts = []},
     #field{name = spreading, fnum = 7, rnum = 8,
	    type = {enum, 'Spreading'}, occurrence = optional,
	    opts = []},
     #field{name = coderate, fnum = 8, rnum = 9,
	    type = {enum, 'Coderate'}, occurrence = optional,
	    opts = []},
     #field{name = rssi, fnum = 9, rnum = 10, type = float,
	    occurrence = optional, opts = []},
     #field{name = snr, fnum = 10, rnum = 11, type = float,
	    occurrence = optional, opts = []},
     #field{name = payload, fnum = 11, rnum = 12,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def(miner_TxPacket_pb) ->
    [#field{name = freq, fnum = 1, rnum = 2, type = uint32,
	    occurrence = optional, opts = []},
     #field{name = radio, fnum = 2, rnum = 3,
	    type = {enum, 'Radio'}, occurrence = optional,
	    opts = []},
     #field{name = power, fnum = 3, rnum = 4, type = int32,
	    occurrence = optional, opts = []},
     #field{name = bandwidth, fnum = 4, rnum = 5,
	    type = {enum, 'Bandwidth'}, occurrence = optional,
	    opts = []},
     #field{name = spreading, fnum = 5, rnum = 6,
	    type = {enum, 'Spreading'}, occurrence = optional,
	    opts = []},
     #field{name = coderate, fnum = 6, rnum = 7,
	    type = {enum, 'Coderate'}, occurrence = optional,
	    opts = []},
     #field{name = invert_polarity, fnum = 7, rnum = 8,
	    type = bool, occurrence = optional, opts = []},
     #field{name = omit_crc, fnum = 8, rnum = 9, type = bool,
	    occurrence = optional, opts = []},
     #field{name = implicit_header, fnum = 9, rnum = 10,
	    type = bool, occurrence = optional, opts = []},
     #field{name = payload, fnum = 10, rnum = 11,
	    type = bytes, occurrence = optional, opts = []}];
find_msg_def(_) -> error.


find_enum_def('Radio') -> [{'R0', 0}, {'R1', 1}];
find_enum_def('Spreading') ->
    [{'UNDEFINED', 0}, {'SF7', 1}, {'SF8', 2}, {'SF9', 3},
     {'SF10', 4}, {'SF11', 5}, {'SF12', 6}];
find_enum_def('Bandwidth') ->
    [{'UNDEFINED', 0}, {'BW7_8kHz', 1}, {'BW15_6kHz', 2},
     {'BW31_2kHz', 3}, {'BW62_5kHz', 4}, {'BW125kHz', 5},
     {'BW250kHz', 6}, {'BW500kHz', 7}];
find_enum_def('Coderate') ->
    [{'UNDEFINED', 0}, {'CR4_5', 1}, {'CR4_6', 2},
     {'CR4_7', 3}, {'CR4_8', 4}];
find_enum_def(_) -> error.


enum_symbol_by_value('Radio', Value) ->
    enum_symbol_by_value_Radio(Value);
enum_symbol_by_value('Spreading', Value) ->
    enum_symbol_by_value_Spreading(Value);
enum_symbol_by_value('Bandwidth', Value) ->
    enum_symbol_by_value_Bandwidth(Value);
enum_symbol_by_value('Coderate', Value) ->
    enum_symbol_by_value_Coderate(Value).


enum_value_by_symbol('Radio', Sym) ->
    enum_value_by_symbol_Radio(Sym);
enum_value_by_symbol('Spreading', Sym) ->
    enum_value_by_symbol_Spreading(Sym);
enum_value_by_symbol('Bandwidth', Sym) ->
    enum_value_by_symbol_Bandwidth(Sym);
enum_value_by_symbol('Coderate', Sym) ->
    enum_value_by_symbol_Coderate(Sym).


enum_symbol_by_value_Radio(0) -> 'R0';
enum_symbol_by_value_Radio(1) -> 'R1'.


enum_value_by_symbol_Radio('R0') -> 0;
enum_value_by_symbol_Radio('R1') -> 1.

enum_symbol_by_value_Spreading(0) -> 'UNDEFINED';
enum_symbol_by_value_Spreading(1) -> 'SF7';
enum_symbol_by_value_Spreading(2) -> 'SF8';
enum_symbol_by_value_Spreading(3) -> 'SF9';
enum_symbol_by_value_Spreading(4) -> 'SF10';
enum_symbol_by_value_Spreading(5) -> 'SF11';
enum_symbol_by_value_Spreading(6) -> 'SF12'.


enum_value_by_symbol_Spreading('UNDEFINED') -> 0;
enum_value_by_symbol_Spreading('SF7') -> 1;
enum_value_by_symbol_Spreading('SF8') -> 2;
enum_value_by_symbol_Spreading('SF9') -> 3;
enum_value_by_symbol_Spreading('SF10') -> 4;
enum_value_by_symbol_Spreading('SF11') -> 5;
enum_value_by_symbol_Spreading('SF12') -> 6.

enum_symbol_by_value_Bandwidth(0) -> 'UNDEFINED';
enum_symbol_by_value_Bandwidth(1) -> 'BW7_8kHz';
enum_symbol_by_value_Bandwidth(2) -> 'BW15_6kHz';
enum_symbol_by_value_Bandwidth(3) -> 'BW31_2kHz';
enum_symbol_by_value_Bandwidth(4) -> 'BW62_5kHz';
enum_symbol_by_value_Bandwidth(5) -> 'BW125kHz';
enum_symbol_by_value_Bandwidth(6) -> 'BW250kHz';
enum_symbol_by_value_Bandwidth(7) -> 'BW500kHz'.


enum_value_by_symbol_Bandwidth('UNDEFINED') -> 0;
enum_value_by_symbol_Bandwidth('BW7_8kHz') -> 1;
enum_value_by_symbol_Bandwidth('BW15_6kHz') -> 2;
enum_value_by_symbol_Bandwidth('BW31_2kHz') -> 3;
enum_value_by_symbol_Bandwidth('BW62_5kHz') -> 4;
enum_value_by_symbol_Bandwidth('BW125kHz') -> 5;
enum_value_by_symbol_Bandwidth('BW250kHz') -> 6;
enum_value_by_symbol_Bandwidth('BW500kHz') -> 7.

enum_symbol_by_value_Coderate(0) -> 'UNDEFINED';
enum_symbol_by_value_Coderate(1) -> 'CR4_5';
enum_symbol_by_value_Coderate(2) -> 'CR4_6';
enum_symbol_by_value_Coderate(3) -> 'CR4_7';
enum_symbol_by_value_Coderate(4) -> 'CR4_8'.


enum_value_by_symbol_Coderate('UNDEFINED') -> 0;
enum_value_by_symbol_Coderate('CR4_5') -> 1;
enum_value_by_symbol_Coderate('CR4_6') -> 2;
enum_value_by_symbol_Coderate('CR4_7') -> 3;
enum_value_by_symbol_Coderate('CR4_8') -> 4.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


get_package_name() -> undefined.



gpb_version_as_string() ->
    "4.4.1".

gpb_version_as_list() ->
    [4,4,1].
